//
//  Slide.swift
//  Nahoft
//
//  Created by Sadra Sadri on 11.08.2023.
//

import SwiftUI

struct Slide: Identifiable, Equatable {
    var id = UUID().uuidString
    var image: String
    var title: LocalizedStringKey
    var description: LocalizedStringKey
    var fullDescription: LocalizedStringKey? = nil
    var showButtonAsLink: Bool = false
    var buttonText: LocalizedStringKey = "Close"
}

class Slides {
    static let introSlides: [Slide] = [
        Slide(image: "person.3", title: "Nahoft's team", description: "Iranian and non-Iranian experts with work experience in big tech companies came together and created Nahoft with the support of the United4Iran Organization.", showButtonAsLink: true, buttonText: "Skip"),
        Slide(image: "lock.shield", title: "Nahoft's usage", description: "Keep your conversations private and secure with Nahoft, the end-to-end encrypted communication app.", showButtonAsLink: true, buttonText: "Skip"),
        Slide(image: "lock.iphone", title: "Nahoft's features", description: "A security layer for sending messages over insecure channels \n Fully offline. Nahoft operates without servers \n Destruction code. Instantly erase your data.", buttonText: "Get Started")
    ]
    
    static let settingSlides: [Slide] = [
        Slide(image: "lock.shield", title: "Passcode", description: "By activating the 'Password' option, you can define a six-digit password that you will need every time you log in to Nahoft. By activating the password feature, at the bottom of the main screen, the 'Logout' option will be activated."),
        Slide(image: "delete.backward.fill", title: "Destruction Code", description: "By enabling the 'Destruction code' option, you define a six-digit password that will be used to destroy all information stored inside the app, including deleting messages and friend lists. \n You will use this password in emergency situations so that the people you don’t want can’t have access to your information."),
        Slide(image: "door.right.hand.open", title: "Logout", description: "The option to log out will only be displayed if you have set a 'password.' By clicking on this option, you will immediately get logged out of Nahoft. If you don\'t use the logout option, Nahoft will lock itself after a few minutes of inactivity, and you will need your password to enter it."),
        Slide(image: "key.fill", title: "Your public key", description: "This software utilizes the well-known library libsodium and the Asymmetric Encryption with Authentication method for encryption and decryption. Each user has a private key and a public key. When User 1 wants to send a message to User 2, they use their own private key and User 2\'s public key for encryption…", fullDescription: "This software utilizes the well-known library libsodium and the Asymmetric Encryption with Authentication method for encryption and decryption. Each user has a private key and a public key. When User 1 wants to send a message to User 2, they use their own private key and User 2\'s public key for encryption. The generated message has only two possible ways for decryption:\n. Using User 1\'s private key, who generated the message, and User 2\'s public key.\n. Using User 2\'s private key, who is the recipient of the message, and User 1\'s public key.\nTherefore, in order for your friends to send you a message, they must have your public key. If you expose your public key to the public, it will not pose any security issues. You can see your public key from the setting."),
        Slide(image: "exclamationmark.bubble.circle.fill", title: "About Nahoft", description: "“Nahoft” is not a messaging app. It is a tool for encryption. Nahoft is an offline software for encrypting text messages on Android phones.\nEncrypting your text messages means that even if your message gets intercepted by a third party, that party can not read it. The only person that can read your message is the one with whom you exchanged your public key…", fullDescription: "“Nahoft” is not a messaging app. It is a tool for encryption. Nahoft is an offline software for encrypting text messages on Android phones.\nEncrypting your text messages means that even if your message gets intercepted by a third party, that party can not read it. The only person that can read your message is the one with whom you exchanged your public key.\nNahoft is offline, which means you do not need to be connected to the internet to encrypt your messages.\nNahoft only encrypts text messages. Currently, it does not provide encrypted voice and video messages.\nNahoft can encrypt text messages as text. It also can encrypt them as a photo (Steganography.) You can send an encrypted text message or a photo containing a message via another channel that allows you to send the file (for example, SMS, MMS, or a messaging app that allows you to send the file unchanged.) So, the other person, after receiving the message, transfers the encrypted text or photo to Nahoft and reads it. \n For the time being, Nahoft can be installed on phones that use the Android operating system.\nNahoft is not a messaging app. It only encrypts the user’s text messages. The user can send the encrypted message to another one through one of the messaging apps (in an insecure network or even using an insecure messaging app.) The other person should be using Nahoft as well. Both should have already exchanged the public keys with one another to enter the messages into this software and read the encrypted messages. Nahoft uses public keys that can be shared with others. It also creates a private key hidden in the app to read the sent messages between two users.\nNahoft’s goal is to make it possible for users to send secure messages even through insecure messaging apps and networks. It means that if a user does not have access to secure internet or can not use secure messaging apps (in the case of internet censorship, filtering, and total internet shutdown) and only have access to insecure messaging apps and networks inside the country, even in this case, the users can encrypt the text messages and send them in the network. So, even if the message gets intercepted, it will still not be intelligible since it is encrypted. \nNote: Public keys (also the private key) change whenever you delete and reinstall the app, as well as each time you change your phone and reinstall the app. So, each time you change your phone or delete the app and reinstall it, you need to exchange the keys with your friends.\nImportant: Nahoft is open-source software, and everyone can have access to its code."),
        Slide(image: "exclamationmark.bubble.circle.fill", title: "Nahoft creators", description: "\"Nahoft\" is one of the apps that has been created in the Iran Cubator 2 program and under the supervision of the \"United for Iran\" organization. United for Iran is a human rights organization based in Berkeley, California. Its goal is to promote civil liberties in Iran, defend human rights, support civil society, and encourage citizens to participate through technology.")
    ]
    
    static let friendListSlides: [Slide] = [
        Slide(image: "person.crop.circle.badge.plus", title: "Add new contact", description: "To add a new friend; Click on the plus +  icon on home page. Two options will appear: \n Option 1: Add a new contact from the contact list. \n Option 2: Create a new contact."),
        Slide(image: "person.crop.circle.badge.minus", title: "Delete a contact", description: "To delete a contact, follow these steps: \n Hold your finger on the name of the desired friend for a few seconds. \n After a few seconds, you will see a message asking if you are sure you want to delete your friend. By selecting the \"Yes\" option, your friend will be deleted."),
        Slide(image: "person.crop.circle.badge.checkmark", title: "Edit contact name", description: "To edit the name or phone number of your friend, follow these steps: \n Click once on the name of your friend to go to the chat page. \n Once inside the chat page, click again on the name of your friend. \n A new page will open where you can edit the name and phone number of your friend."),
        Slide(image: "StatusIconDefault", title: "Default status", description: "This status is displayed with a gray circle next to your friend\'s name. And it means that you have added your friend to your friend list but you have not sent your public key to him/her yet, nor has he/she sent you his/her public key."),
        Slide(image: "StatusIconRequested", title: "Requested status", description: "This status is displayed with an orange circle next to your friend\'s name. It means that your friend has sent you his/her public key and is now requesting that you send him/her your public key."),
        Slide(image: "StatusIconInvited", title: "Invited status", description: "This status is displayed with a purple circle next to your friend\'s name. It means that you have sent your public key to your friend and are waiting to receive his public key."),
        Slide(image: "StatusIconApproved", title: "Approved status", description: "This status is displayed with a blue circle next to your friend\'s name. It means the public key has been exchanged between you and your friend."),
        Slide(image: "StatusIconVerified", title: "Verified status", description: "This status is displayed with a green and white confirmation icon next to your friend\'s name. It means that a public key exchange has occurred between you and your friend, and you have securely verified through a trusted third party that your friend has indeed sent their public key and not someone else.")
    ]
    
    static let messageListSlides: [Slide] = [
        Slide(image: "paperplane.circle.fill", title: "How to manually send encrypted text", description: "To manually send an encrypted text, you need to follow these steps:\n1. Exchange public keys with your desired friend beforehand.\n2. Go to your friend\'s chat page and, at the bottom of the page, write your message in the \"type your message\" section, similar to any other messaging platform…", fullDescription: "To manually send an encrypted text, you need to follow these steps:\n1. Exchange public keys with your desired friend beforehand.\n2. Go to your friend\'s chat page and, at the bottom of the page, write your message in the \"type your message\" section, similar to any other messaging platform.\n3. Press the send button. Immediately after sending the message, a popup will appear.\n4. Copy the encrypted text and send it to the intended person through any messaging platform you prefer."),
        Slide(image: "square.and.arrow.down.fill", title: "How to manually receive encrypted text", description: "To decrypt and read an encrypted text, you need to follow these steps:\n1. Make sure you know who sent the message and that you have previously exchanged public keys.\n2. Copy the received encrypted text…", fullDescription: "To decrypt and read an encrypted text, you need to follow these steps:\n1. Make sure you know who sent the message and that you have previously exchanged public keys.\n2. Copy the received encrypted text.\n3. Go to the chat page of the person whose message you want to decrypt.\n4. Click on the import file icon located at the top right of the page. A window will open.\n5. Paste the text into the window and click the \"Insert Text\" option.\n6. The decrypted message will be readable on the chat page."),
//         Slide(image: "photo.fill.on.rectangle.fill", title: "How to send encrypted images", description: "To send an encrypted photo manually, you need to follow these two conditions:\nCondition 1: You know who you want to send the photo to and have previously exchanged public keys…", fullDescription: "To send an encrypted photo manually, you need to follow these two conditions:\nCondition 1: You know who you want to send the photo to and have previously exchanged public keys.\nCondition 2: You send the photo as a file to your friend. For example, if you are using Telegram to send the photo, you should send it as a file and not directly from your phone\'s gallery. This is because Telegram reduces the size of photos, and it won\'t be possible to decrypt such a photo. However, if you send the photo as a file, Telegram won\'t make any changes to the photo, and it can be decrypted.\nAssuming you have met the above two conditions, go to the chat page of the person you want to send the encrypted message to. On the bottom left side of the page, click on camera icon. After clicking, two new icons will appear.\nDownload icon is for when you want to hide your message in a photo and save the photo on your phone to send it to someone later.\nShare icon is for when you want to hide your message in a photo and immediately send the photo through other messaging apps to the desired person."),
//        Slide(image: "square.and.arrow.down.on.square.fill", title: "How to receive encrypted images", description: "To manually decrypt an encrypted photo, you need to follow these two conditions:\nCondition 1: You know who sent the photo and have previously exchanged public keys…", fullDescription: "To manually decrypt an encrypted photo, you need to follow these two conditions:\nCondition 1: You know who sent the photo and have previously exchanged public keys.\nCondition 2: The sent photo has been sent to you as a file, and you have saved it as a file on your mobile device. If, for example, you receive a photo on Telegram that has been compressed by Telegram, it cannot be decrypted.\nAssuming you have met the above two conditions, go to the chat page of the person whose message you want to decrypt. On the top right side of the page, click on the image icon. A pop-up window will appear, allowing you to browse and select the desired photo from your mobile device. The decrypted message will be readable in the chat page."),
        Slide(image: "square.and.arrow.up.circle.fill", title: "Importing to Nahoft through share option", description: "Just like other apps, Nahoft lets you share a text or photo from your gallery or mobile memory by selecting Nahoft from the list of suggested apps. Choosing Nahoft will take you to Nahoft\'s friend list, where you can select who you want to send a picture to."),
        Slide(image: "key.fill", title: "Friend's public key", description: "To view your friend\'s public key, go to the chat page of you and your friend. On the chat page, click on their name, a new page will open where you can see both your friend\'s public key and your own public key. Your public key can also be viewed from the settings section.")
    ]
    
    static let aboutSlides: [Slide] = [
        Slide(image: "exclamationmark.bubble.circle.fill", title: "About Nahoft", description: "“Nahoft” is not a messaging app. It is a tool for encryption. Nahoft is an offline software for encrypting text messages on Android phones.\nEncrypting your text messages means that even if your message gets intercepted by a third party, that party can not read it. The only person that can read your message is the one with whom you exchanged your public key…", fullDescription: "“Nahoft” is not a messaging app. It is a tool for encryption. Nahoft is an offline software for encrypting text messages on Android phones.\nEncrypting your text messages means that even if your message gets intercepted by a third party, that party can not read it. The only person that can read your message is the one with whom you exchanged your public key.\nNahoft is offline, which means you do not need to be connected to the internet to encrypt your messages.\nNahoft only encrypts text messages. Currently, it does not provide encrypted voice and video messages.\nNahoft can encrypt text messages as text. It also can encrypt them as a photo (Steganography.) You can send an encrypted text message or a photo containing a message via another channel that allows you to send the file (for example, SMS, MMS, or a messaging app that allows you to send the file unchanged.) So, the other person, after receiving the message, transfers the encrypted text or photo to Nahoft and reads it. \n For the time being, Nahoft can be installed on phones that use the Android operating system.\nNahoft is not a messaging app. It only encrypts the user’s text messages. The user can send the encrypted message to another one through one of the messaging apps (in an insecure network or even using an insecure messaging app.) The other person should be using Nahoft as well. Both should have already exchanged the public keys with one another to enter the messages into this software and read the encrypted messages. Nahoft uses public keys that can be shared with others. It also creates a private key hidden in the app to read the sent messages between two users.\nNahoft’s goal is to make it possible for users to send secure messages even through insecure messaging apps and networks. It means that if a user does not have access to secure internet or can not use secure messaging apps (in the case of internet censorship, filtering, and total internet shutdown) and only have access to insecure messaging apps and networks inside the country, even in this case, the users can encrypt the text messages and send them in the network. So, even if the message gets intercepted, it will still not be intelligible since it is encrypted. \nNote: Public keys (also the private key) change whenever you delete and reinstall the app, as well as each time you change your phone and reinstall the app. So, each time you change your phone or delete the app and reinstall it, you need to exchange the keys with your friends.\nImportant: Nahoft is open-source software, and everyone can have access to its code."),
        Slide(image: "exclamationmark.bubble.circle.fill", title: "Nahoft creators", description: "\"Nahoft\" is one of the apps that has been created in the Iran Cubator 2 program and under the supervision of the \"United for Iran\" organization. United for Iran is a human rights organization based in Berkeley, California. Its goal is to promote civil liberties in Iran, defend human rights, support civil society, and encourage citizens to participate through technology.")
    ]
}
